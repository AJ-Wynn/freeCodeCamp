/* use * as a global selector */
* {

    /* by default, the content-box model is used where an element 
        has a specific width which is calculated based only on the element's content */
    /* Padding and border values get added to the total width */
    /* Border-box model is where the total width of the element 
        (including padding and border) will be the explicit width. 
        Content of the element will shrink to make room for padding and border */
    box-sizing: border-box;
    /* box-sizing: border-box makes it so the element's contents will 
        shrink to ensure the border and padding fit within the enclosing element */
  }
  
  body {
    margin: 0;
    font-family: sans-serif;
    background: #f5f6f7;
  }
  
  .header {
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;
  }
  
  .gallery {
    display: flex;
    /* Flexbox has a main and cross axis. Main axis is defined by flex-direction property */
    flex-direction: row;
    /* flex-wrap property determines how flex items behave when flex container is too small. 
        wrap = items wrap to next row/column */
    flex-wrap: wrap;
    /* justify-content property determines how items inside a flex container are 
        positioned along the main axis, control position and spacing */
    justify-content: center;
    /* align-items property positions flex content along the cross-axis 
        (perpendicular to main axis). So here it aligns images vertiically */
    align-items: center;
    gap: 16px;
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px 10px;
  }
  
  .gallery img {
    width: 100%;
    max-width: 350px;
    height: 300px;
    /* object-fit: cover crops the images so that they fill the image container 
        while maintaining aspect ratio */
    object-fit: cover;
    border-radius: 10px;
  }
  /* ::after pseudo-element creates an element that is the last child of the 
    selected element */
  .gallery::after {
    content: "";
    width: 350px;
  }
  
